<?php

include_once 'data_snapshots.fields.data_snapshot_data_source.inc';
include_once 'data_snapshots.fields.data_snapshot.inc';
include_once 'data_snapshots.field_groups.inc';

//function hook_ctools_plugin_api($module, $api) {
//  if ($module == 'field_group' && $api == 'field_group') {
//    return array('version' => 1);
//  }
//}


/*
function data_snapshots_theme_registry_alter(&$theme_registry) {
  $theme_registry["data_snapshot"]["path"] = drupal_get_path('module', 'data_snapshot');
}
*/

function data_snapshots_theme($existing, $type, $theme, $path) {
  return array (
    'node__data_snapshot' => array(
      'template' => 'node--data-snapshot',
    ),
    'dataset-snapshot-block' => array(
      'variables' => array(
        'data_set_name' => NULL,
        'data_set_number' => NULL
      ),
      'template' => 'dataset-snapshot-block'
    ),
  );
}

/*
function data_snapshots_theme() {
  return array(
    'data_snapshot' => array(
      'template' => 'data-snapshot',       // define xxx-xxx.tpl.php inside module
      'variables' => array('xxx' => null), // define $xxx so it will available in your xxx-xxx.tpl.php
    ),
  );
}
*/

/**
 * Implements hook_ctools_plugin_api().
 */
function data_snapshots_ctools_plugin_api() {
  list($module, $api) = func_get_args();
  if ($module == 'field_group' && $api == 'field_group') {
    return array('version' => 1);
  }    
}

function data_snapshots_node_info() {
  $items = array(
    'data_snapshot_data_source' => array(
      'name' => t('Data Snapshot Data Source'),
      //NOTE: the setting for 'base' seems to determine (at least) two things:
      //      (a) the prefix for forming the names of hook functions for this
      //          content type; e.g. if 'base' => 'BASE', then we can
      //          implement BASE_load(), BASE_view(), etc, and Drupal will
      //          call them when dealing with a node of this content type
      //      (b) whether or not this content type appears in the list of
      //          editable content types in the admin menu at
      //            Administration >> Structure >> Content Types
      //          Note however, that regardless of whether this content type
      //          appears in the list, you can always navigate directly
      //          to the URL for editing it at
      //             admin/structure/types/manage/data-snapshot-data-source
      'base' => 'data_snapshots',
      //'base' => 'node_content',
      'description' => t('Content type for Data Snapshot Data Sources'),
      'has_title' => '1',
      'title_label' => t('Public Name for Dataset'),
      'help' => '',
    ),
    'data_snapshot' => array(
      'name' => t('Data Snapshot'),
      'base' => 'data_snapshots',
      'description' => t('Content type for Data Snapshots'),
      'has_title' => '1',
      'title_label' => t('Title'),
      'help' => '',
    ),
  );
  return $items;
}

/*
function data_snapshots_load($nodes) {
  //dsm("***********   data_snapshots_load   *************************\n");
  //dsm($nodes);
  //NOTE: hook_load() does not (need to) return anything
}
*/


/**
 * Implements hook_view()
 *
 * This gets called before rendering any nodes defined in our hook_node_info() above for
 * which base=data_snapshots.  We can use this to modify the node object before it is
 * rendered.
 *
 * This funtion should ALWAYS return $node!!!
 *
 * What the @#$%&*# !!!???
 *
 *   The mere presence of this hook apparently changes the structure of the contents
 *   of the $node object that gets passed to the template file.  When this hook is
 *   NOT present, field values are available like:
 *       $node->{'field_datasnapshot_year'}['und'][0]['value']
 *   When this hook is present, though, the 'und' layer disappears, so the same field
 *   becomes
 *       $node->{'field_datasnapshot_year'}[0]['value']
 *   This happens regardless of what this function (data_snapshots_view) does --
 *   in particular, simply creating a data_snapshots_view function that just
 *   does "return $node" causes this.
 *
 *   Note, however, that this is true only for the $node object that
 *   gets passed to the *.tpl.php, however.  The $node object passed to
 *   data_snapshots_view() here DOES have the 'und' layer.
 *
 * UPDATE:
 *
 *   Well, it seems that making a few other changes, such as setting
 *   some fields in $node->content below, and adding another tpl.php
 *   for theming that content, caused the 'und' level to reappear.
 *
 *   The moral of this story is that whenever you change anything
 *   here, better re-examine how everything looks and fix anything
 *   that breaks!
 *
 *   Isn't Drupal wonderful!!
 */
function data_snapshots_view($node, $view_mode) {
  //dsm('data_snapshots_view');
  //dsm($node);
  if ($node->type == "data_snapshot" && $view_mode == "full") {
    $dataset_nid = db_select('field_data_field_dssds_machine_name', 'f')
      ->condition('field_dssds_machine_name_value', "usdm")
      ->fields('f', array('entity_id'))
      ->execute()
      ->FetchField();
    if ($dataset_nid != FALSE) {
      $dataset_node = node_load($dataset_nid);
      $node->content['dataset'] = array(
        '#markup' => theme('dataset-snapshot-block', array(
          'data_set_name' => $dataset_node->title,
          'data_set_number' => '3.1415927'
        )),
        '#weight' => 100
      );
    }
  }

  return $node;
  //NOTE: hook_view MUST return $node
}




function data_snapshots_node_type_insert($content_type) {

  if ($content_type->type == 'data_snapshot') {
    foreach (data_snapshots_fields_data_snapshot() as $field) {
      field_create_field($field['field_config']);
      $instance = $field['field_instance'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'data_snapshot';
      field_create_instance($instance);
    }
  }

  if ($content_type->type == 'data_snapshot_data_source') {
    foreach (data_snapshots_fields_data_snapshot_data_source() as $field) {
      field_create_field($field['field_config']);
      $instance = $field['field_instance'];
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'data_snapshot_data_source';
      field_create_instance($instance);
    }
  }

}
